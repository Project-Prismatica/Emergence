### Install
apt-get install mongodb???



db.createUser({user:"root", pwd:"password", roles:[{role:"root", db:"admin"}]})

use prismatica
db.createCollection( "TASK" )
db.createCollection( "C2" )
db.TASK.insert( {
"agentid": "1",
"taskid": "1",
"datetime": "now",
"cmd": "notepad.exe"
} )

db.getCollection("prismatica").find()
db.TASK.find({"agentid" : "1"})

# C2
{
"agentid": "1",
"taskid": "1",
"datetime": "now",
"cmd": "notepad.exe",
"retcode": "1",
"retval": "retzzz"
}

# TASK
{
"agentid": "1",
"taskid": "1",
"datetime": "now",
"cmd": "notepad.exe"
}


{
"component": "oculus",
"action": {
   "start_listener": {
      "name": "httplistener",
      "type": "http",
      "lport": "80",
      "lhost": "10.0.0.134"
      }
   }
}



# eComponents:

{
  component: {
    name: "oculus",
    description: "c2 handler",
    connector: "REST-API",
    triggers: {
      beacon: "",
      task: ""
    }
    actions: {
      startlistener: {
        name: "",
        type: "http, https",
        lport: "",
        lhost: ""
      },
      stoplistener: {
        name: "",
        id: ""
      }
    }
  }
  component: {
    name: "diagon"
  }
  component: {
    name: "orobus"
  }
  component: {
    name: "prism"
  }
}


# eActions
{
  startlistener: {
    name: "",
    type: "http, https",
    lport: "",
    lhost: ""
  }
}



# Events
{
  event: {
    id: "",
    datetime: "",
    name: "",
    type: "",
    source: "component name, user defined, tool import, etc ",
    tags: ["tool name, command generated, etc"]
  }
}


# Finding
{
  finding: {
    id: "",
    title: "Name from dropdown (autofills fields, or create new)",
    creator: "",
    rating: "",
    confidence: "",
    observation: "",
    discussion: "",
    recommendations: "",
    references: "",
    events : ["id", "id", "..."],
    evidence: "screenshots, observations, etc",
    notes: "",
  }
}
